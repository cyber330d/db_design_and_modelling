CREATE TYPE "user_role_enum" AS ENUM (
  'user',
  'admin',
  'super_admin'
);

CREATE TYPE "payment_status_enum" AS ENUM (
  'pending',
  'completed',
  'failed'
);

CREATE TYPE "payment_gateway_enum" AS ENUM (
  'stripe',
  'flutterwave',
  'lemonsqueezy'
);

CREATE TYPE "user_status_enum" AS ENUM (
  'active',
  'inactive'
);

CREATE TYPE "notification_type_enum" AS ENUM (
  'email',
  'push'
);

CREATE TABLE "users" (
  "id" uuid PRIMARY KEY,
  "first_name" varchar(255) NOT NULL,
  "last_name" varchar(255) NOT NULL,
  "username" varchar(255) UNIQUE NOT NULL,
  "email" varchar(255) UNIQUE NOT NULL,
  "password" varchar(255) NOT NULL,
  "status" user_status_enum NOT NULL DEFAULT 'active',
  "language" varchar(10),
  "region" varchar(10),
  "magic_link_token" varchar(255),
  "social_auth_provider" varchar(255),
  "gdpr_cookies_consent" boolean,
  "settings" json,
  "created_at" timestamp DEFAULT (now()),
  "updated_at" timestamp DEFAULT (now()),
  "last_login" timestamp
);

CREATE TABLE "sessions" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "user_id" uuid,
  "token" varchar(255) NOT NULL,
  "expires_at" timestamp NOT NULL
);

CREATE TABLE "password_resets" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "user_id" uuid,
  "token" varchar(255) NOT NULL,
  "expires_at" timestamp NOT NULL
);

CREATE TABLE "roles" (
  "id" uuid PRIMARY KEY DEFAULT (uuid_generate_v4()),
  "name" varchar(255) UNIQUE NOT NULL,
  "description" text
);

CREATE TABLE "user_roles" (
  "user_id" uuid,
  "role_id" uuid,
  "created_at" timestamp DEFAULT (now()),
  "updated_at" timestamp DEFAULT (now()),
  PRIMARY KEY ("user_id", "role_id")
);

CREATE TABLE "organisations" (
  "id" uuid PRIMARY KEY DEFAULT (uuid_generate_v4()),
  "name" varchar(255) NOT NULL,
  "description" text,
  "settings" json,
  "created_at" timestamp DEFAULT (now()),
  "updated_at" timestamp DEFAULT (now())
);

CREATE TABLE "organisation_users" (
  "user_id" uuid,
  "organisation_id" uuid,
  "role_id" uuid,
  "created_at" timestamp DEFAULT (now()),
  "updated_at" timestamp DEFAULT (now()),
  PRIMARY KEY ("user_id", "organisation_id")
);

CREATE TABLE "emails" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "sender_id" uuid,
  "recipient_email" varchar(255) NOT NULL,
  "subject" varchar(255),
  "body" text,
  "sent_timestamp" timestamp NOT NULL
);

CREATE TABLE "email_templates" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "template_name" varchar(255) UNIQUE NOT NULL,
  "subject" varchar(255),
  "body" text,
  "created_at" timestamp DEFAULT (now()),
  "updated_at" timestamp DEFAULT (now())
);

CREATE TABLE "waitlist" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "email" varchar(255) UNIQUE NOT NULL,
  "signup_time" timestamp NOT NULL
);

CREATE TABLE "invites" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "sender_user_id" uuid,
  "recipient_email" varchar(255) NOT NULL,
  "sent_timestamp" timestamp NOT NULL,
  "status" varchar(255)
);

CREATE TABLE "user_data" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "user_id" uuid,
  "data_type" varchar(255) NOT NULL,
  "value" json,
  "timestamp" timestamp NOT NULL
);

CREATE TABLE "widgets" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "user_id" uuid,
  "widget_type" varchar(255) NOT NULL,
  "data" json
);

CREATE TABLE "notifications" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "user_id" uuid,
  "notification_type" notification_type_enum NOT NULL,
  "message" text NOT NULL,
  "read" boolean DEFAULT false,
  "created_at" timestamp DEFAULT (now())
);

CREATE TABLE "push_notifications" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "user_id" uuid,
  "content" text,
  "sent_at" timestamp NOT NULL
);

CREATE TABLE "activity_logs" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "user_id" uuid,
  "activity_type" varchar(255) NOT NULL,
  "activity_details" json,
  "timestamp" timestamp DEFAULT (now())
);

CREATE TABLE "payments" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "user_id" uuid,
  "organisation_id" uuid,
  "amount" decimal(10,2) NOT NULL,
  "currency" varchar(3) NOT NULL,
  "payment_gateway" payment_gateway_enum NOT NULL,
  "payment_status" payment_status_enum NOT NULL DEFAULT 'pending',
  "provider_payment_id" varchar(255),
  "created_at" timestamp DEFAULT (now()),
  "updated_at" timestamp DEFAULT (now())
);

CREATE TABLE "blogs" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "user_id" uuid,
  "organisation_id" uuid,
  "title" varchar(255) NOT NULL,
  "content" text NOT NULL,
  "created_at" timestamp DEFAULT (now()),
  "updated_at" timestamp DEFAULT (now())
);

CREATE TABLE "charts" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "user_id" uuid,
  "chart_data" json,
  "created_at" timestamp DEFAULT (now())
);

CREATE TABLE "ai_integrations" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "user_id" uuid,
  "integration_type" varchar(255),
  "details" json,
  "created_at" timestamp DEFAULT (now())
);

CREATE TABLE "migrations" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "migration_name" varchar(255) NOT NULL,
  "run_at" timestamp NOT NULL
);

CREATE TABLE "recommendations" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "user_id" uuid,
  "content" text,
  "created_at" timestamp DEFAULT (now())
);

COMMENT ON COLUMN "users"."id" IS 'Unique identifier for users';

COMMENT ON COLUMN "users"."username" IS 'Username for login';

COMMENT ON COLUMN "users"."email" IS 'Email address';

COMMENT ON COLUMN "users"."password" IS 'Hashed password';

COMMENT ON COLUMN "users"."status" IS 'User status';

COMMENT ON COLUMN "users"."gdpr_cookies_consent" IS 'GDPR consent status';

COMMENT ON COLUMN "users"."settings" IS 'User-specific settings';

COMMENT ON COLUMN "users"."created_at" IS 'Timestamp when user account was created';

COMMENT ON COLUMN "users"."updated_at" IS 'Timestamp when user account was last updated';

COMMENT ON COLUMN "users"."last_login" IS 'Timestamp of last login';

COMMENT ON TABLE "sessions" IS 'Stores user session information';

COMMENT ON COLUMN "sessions"."id" IS 'Session identifier';

COMMENT ON COLUMN "sessions"."user_id" IS 'Associated user';

COMMENT ON COLUMN "sessions"."token" IS 'Session token';

COMMENT ON COLUMN "sessions"."expires_at" IS 'Session expiration timestamp';

COMMENT ON TABLE "password_resets" IS 'Stores password reset tokens';

COMMENT ON COLUMN "password_resets"."id" IS 'Password reset identifier';

COMMENT ON COLUMN "password_resets"."user_id" IS 'User requesting password reset';

COMMENT ON COLUMN "password_resets"."token" IS 'Reset token';

COMMENT ON COLUMN "password_resets"."expires_at" IS 'Token expiration timestamp';

COMMENT ON TABLE "roles" IS 'Stores role information';

COMMENT ON COLUMN "roles"."id" IS 'Role identifier';

COMMENT ON COLUMN "roles"."name" IS 'Role name';

COMMENT ON COLUMN "roles"."description" IS 'Role description';

COMMENT ON TABLE "user_roles" IS 'Join table to represent the many-to-many relationship between users and roles';

COMMENT ON COLUMN "user_roles"."user_id" IS 'User assigned to role';

COMMENT ON COLUMN "user_roles"."role_id" IS 'Assigned role';

COMMENT ON COLUMN "user_roles"."created_at" IS 'Assignment timestamp';

COMMENT ON COLUMN "user_roles"."updated_at" IS 'Last update timestamp';

COMMENT ON TABLE "organisations" IS 'Stores organisation information';

COMMENT ON COLUMN "organisations"."id" IS 'Organisation identifier';

COMMENT ON COLUMN "organisations"."name" IS 'Organisation name';

COMMENT ON COLUMN "organisations"."description" IS 'Organisation description';

COMMENT ON COLUMN "organisations"."settings" IS 'Organisation-specific settings';

COMMENT ON COLUMN "organisations"."created_at" IS 'Timestamp when organisation was created';

COMMENT ON COLUMN "organisations"."updated_at" IS 'Timestamp when organisation was last updated';

COMMENT ON TABLE "organisation_users" IS 'Join table to represent the many-to-many relationship between users and organisations, including roles';

COMMENT ON COLUMN "organisation_users"."user_id" IS 'User associated with organisation';

COMMENT ON COLUMN "organisation_users"."organisation_id" IS 'Organisation user belongs to';

COMMENT ON COLUMN "organisation_users"."role_id" IS 'Role within the organisation';

COMMENT ON COLUMN "organisation_users"."created_at" IS 'Timestamp when user joined organisation';

COMMENT ON COLUMN "organisation_users"."updated_at" IS 'Timestamp of last update';

COMMENT ON TABLE "emails" IS 'Stores information about sent emails';

COMMENT ON COLUMN "emails"."id" IS 'Email identifier';

COMMENT ON COLUMN "emails"."sender_id" IS 'Sender of the email';

COMMENT ON COLUMN "emails"."recipient_email" IS 'Recipient email address';

COMMENT ON COLUMN "emails"."sent_timestamp" IS 'Timestamp when email was sent';

COMMENT ON TABLE "email_templates" IS 'Stores pre-designed email templates';

COMMENT ON COLUMN "email_templates"."id" IS 'Email template identifier';

COMMENT ON COLUMN "email_templates"."template_name" IS 'Name of the email template';

COMMENT ON COLUMN "email_templates"."created_at" IS 'Timestamp when template was created';

COMMENT ON COLUMN "email_templates"."updated_at" IS 'Timestamp of last update';

COMMENT ON TABLE "waitlist" IS 'Stores user information for waitlisted features';

COMMENT ON TABLE "invites" IS 'Tracks user invitations';

COMMENT ON TABLE "user_data" IS 'Stores user-specific data points';

COMMENT ON TABLE "widgets" IS 'Stores information about user-associated widgets';

COMMENT ON TABLE "notifications" IS 'Stores notification information for users';

COMMENT ON COLUMN "notifications"."id" IS 'Notification identifier';

COMMENT ON COLUMN "notifications"."user_id" IS 'User receiving the notification';

COMMENT ON COLUMN "notifications"."notification_type" IS 'Type of notification (email, push, etc.)';

COMMENT ON COLUMN "notifications"."message" IS 'Notification message';

COMMENT ON COLUMN "notifications"."read" IS 'Read status of the notification';

COMMENT ON COLUMN "notifications"."created_at" IS 'Timestamp when notification was sent';

COMMENT ON COLUMN "push_notifications"."id" IS 'Push notification identifier';

COMMENT ON COLUMN "push_notifications"."user_id" IS 'User receiving the push notification';

COMMENT ON COLUMN "push_notifications"."content" IS 'Push notification content';

COMMENT ON COLUMN "push_notifications"."sent_at" IS 'Timestamp when push notification was sent';

COMMENT ON TABLE "activity_logs" IS 'Stores activity logs for users
          Tracks user actions and app events';

COMMENT ON TABLE "payments" IS 'Stores payment information';

COMMENT ON COLUMN "payments"."id" IS 'Payment identifier';

COMMENT ON COLUMN "payments"."user_id" IS 'User making the payment';

COMMENT ON COLUMN "payments"."organisation_id" IS 'Organisation receiving the payment';

COMMENT ON COLUMN "payments"."amount" IS 'Payment amount';

COMMENT ON COLUMN "payments"."currency" IS 'Payment currency code';

COMMENT ON COLUMN "payments"."payment_gateway" IS 'Payment gateway used';

COMMENT ON COLUMN "payments"."payment_status" IS 'Payment status';

COMMENT ON COLUMN "payments"."provider_payment_id" IS 'Provider-specific payment identifier';

COMMENT ON COLUMN "payments"."created_at" IS 'Timestamp when payment was initiated';

COMMENT ON COLUMN "payments"."updated_at" IS 'Timestamp of last update';

COMMENT ON TABLE "blogs" IS 'Stores blog posts';

COMMENT ON TABLE "charts" IS 'Stores chart data for users';

COMMENT ON TABLE "ai_integrations" IS 'Stores AI integration information';

COMMENT ON TABLE "migrations" IS 'Stores migration information';

COMMENT ON TABLE "recommendations" IS 'Stores recommendation information';

ALTER TABLE "sessions" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("id");

ALTER TABLE "password_resets" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("id");

ALTER TABLE "user_roles" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("id");

ALTER TABLE "user_roles" ADD FOREIGN KEY ("role_id") REFERENCES "roles" ("id");

ALTER TABLE "organisation_users" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("id");

ALTER TABLE "organisation_users" ADD FOREIGN KEY ("organisation_id") REFERENCES "organisations" ("id");

ALTER TABLE "organisation_users" ADD FOREIGN KEY ("role_id") REFERENCES "roles" ("id");

ALTER TABLE "emails" ADD FOREIGN KEY ("sender_id") REFERENCES "users" ("id");

ALTER TABLE "invites" ADD FOREIGN KEY ("sender_user_id") REFERENCES "users" ("id");

ALTER TABLE "user_data" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("id");

ALTER TABLE "widgets" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("id");

ALTER TABLE "notifications" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("id");

ALTER TABLE "push_notifications" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("id");

ALTER TABLE "activity_logs" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("id");

ALTER TABLE "payments" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("id");

ALTER TABLE "payments" ADD FOREIGN KEY ("organisation_id") REFERENCES "organisations" ("id");

ALTER TABLE "blogs" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("id");

ALTER TABLE "blogs" ADD FOREIGN KEY ("organisation_id") REFERENCES "organisations" ("id");

ALTER TABLE "charts" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("id");

ALTER TABLE "ai_integrations" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("id");

ALTER TABLE "recommendations" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("id");
